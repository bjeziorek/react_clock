{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","today","Date","toUTCString","slice","dateId","this","setState","window","setInterval","console","info","prevProps","name","props","debug","clearInterval","className","React","Component","getRandomName","value","now","toString","App","clockName","isClockShown","timerId","toggleClock","event","preventDefault","isShown","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"sNAUaA,EAAb,4MACEC,MAAwB,CACtBC,KAAM,IAFV,EAKEC,OAAQ,IAAIC,MAAOC,cAAcC,OAAO,IAAK,GAL/C,EAOEC,OAAS,EAPX,uDASE,WAA2B,IAAD,OACxBC,KAAKC,SAAS,CAAEP,MAAM,IAAIE,MAAOC,cAAcC,OAAO,IAAK,KAE3DE,KAAKD,OAASG,OAAOC,aAAY,WAC/B,EAAKF,SAAS,CAAEP,MAAM,IAAIE,MAAOC,cAAcC,OAAO,IAAK,KAC3DI,OAAOE,QAAQC,KAAK,EAAKZ,MAAMC,QAC9B,OAfP,gCAkBE,SAAmBY,GACbA,EAAUC,OAASP,KAAKQ,MAAMD,MAChCL,OAAOE,QAAQK,MAAf,uBAAqCH,EAAUC,KAA/C,eAA0DP,KAAKQ,MAAMD,SApB3E,kCAwBE,WAEEL,OAAOQ,cAAcV,KAAKD,UA1B9B,oBA6BE,WACE,OACE,sBAAKY,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SAAiCX,KAAKQ,MAAMD,OAC3C,YAED,sBAAMI,UAAU,cAAhB,mBACMX,KAAKP,MAAMC,eApCzB,GAA2BkB,IAAMC,WCNjC,SAASC,IACP,IAAMC,EAAQnB,KAAKoB,MAAMC,WAAWnB,OAAO,GAE3C,MAAM,SAAN,OAAgBiB,GAUX,IAAMG,EAAb,4MACEzB,MAAQ,CACN0B,UAAW,UACXC,cAAc,GAHlB,EAMEC,QAAU,EANZ,EAyBEC,YAAc,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAU,EAAKhC,MAAM2B,aAE3B,EAAKnB,SAAS,CACZmB,cAAeK,KA9BrB,uDAQE,WAA2B,IAAD,OACxBvB,OAAOwB,iBAAiB,QAAS1B,KAAKsB,aACtCpB,OAAOwB,iBAAiB,cAAe1B,KAAKsB,aAG5CtB,KAAKqB,QAAUnB,OAAOC,aAAY,WAChC,EAAKF,SAAS,CAAEkB,UAAWL,QAC1B,QAfP,kCAkBE,WAEEZ,OAAOQ,cAAcV,KAAKqB,SAC1BnB,OAAOyB,oBAAoB,QAAS3B,KAAKsB,aACzCpB,OAAOyB,oBAAoB,cAAe3B,KAAKsB,eAtBnD,oBAkCE,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,6CACCX,KAAKP,MAAM2B,cAAgB,cAAC,EAAD,CAAOb,KAAMP,KAAKP,MAAM0B,mBAtC5D,GAAyBP,IAAMC,WCd/Be,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d075c920.chunk.js","sourcesContent":["import React from 'react';\n\ninterface State {\n  date: string;\n}\n\ninterface Props {\n  name: string,\n}\n\nexport class Clock extends React.Component <Props, State> {\n  state:Readonly<State> = {\n    date: '',\n  };\n\n  today = new Date().toUTCString().slice(-12, -4) ;\n\n  dateId = 0;\n\n  componentDidMount(): void {\n    this.setState({ date: new Date().toUTCString().slice(-12, -4) });\n\n    this.dateId = window.setInterval(() => {\n      this.setState({ date: new Date().toUTCString().slice(-12, -4) });\n      window.console.info(this.state.date);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>): void {\n    if (prevProps.name !== this.props.name) {\n      window.console.debug(`Renamed from ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount(): void {\n    // this code stops the timer\n    window.clearInterval(this.dateId);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">{this.props.name}</strong>\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {`${this.state.date}`}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock/Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype Props = {};\n\ninterface State {\n  clockName: string,\n  isClockShown: boolean,\n}\n\nexport class App extends React.Component <Props, State> {\n  state = {\n    clockName: 'Clock-0',\n    isClockShown: true,\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    window.addEventListener('click', this.toggleClock);\n    window.addEventListener('contextmenu', this.toggleClock);\n\n    // This code starts a timer\n    this.timerId = window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n  }\n\n  componentWillUnmount(): void {\n    // this code stops the timer\n    window.clearInterval(this.timerId);\n    window.removeEventListener('click', this.toggleClock);\n    window.removeEventListener('contextmenu', this.toggleClock);\n  }\n\n  toggleClock = (event:Event) => {\n    event.preventDefault();\n    const isShown = this.state.isClockShown;\n\n    this.setState({\n      isClockShown: !isShown,\n    });\n  };\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {this.state.isClockShown && <Clock name={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}